package search;

import java.util.Arrays;

/**
 * 斐波那契查找法
 * 1. 斐波那契数列，随着数字的增大相邻两个数的比越接近黄金比例
 * 2. f[k] = f[k-1] + f[k-2]
 * 3. f[k] - 1 = f[k-1] - 1 + f[k-2] - 1 + 1 减一是因为数组下标从0开始
 * 4. mid = low + f[k-1] - 1
 */
public class FibonacciSearch {

	private static int MAX = 20;

	public static void main(String[] args) {
		int[] arr = new int[]{1,2,3,5,8,9,12,16,17,19,22};
		System.out.println(search(arr,16));
	}

	// 获取斐波那契数列,只需要保证要查找的数组长度小于其边界值即可
	// 取20位
	public static int[] fib(){
		int [] fib = new int[MAX];
		fib[0] = 1;
		fib[1] = 1;
		for (int i = 2; i < MAX; i++) {
			fib[i] = fib[i-1]+fib[i-2];
		}
		return fib;
	}

	/**
	 *
	 * @param arr 查询的数组
	 * @param value 查询的值
	 * @return
	 */
	public static int search(int[] arr,int value){
		int low = 0;
		int high = arr.length-1;
		int k = 0; // 指向斐波那契数列的指针
		int [] fib = fib();
		// 从fib数列中找出大于等于数组长度的第一个数
		while (fib[k] - 1 < high){
			k++;
		}
		// 如果数组长度不足，用high下标的值填充数组
		int[] temp = Arrays.copyOf(arr,fib[k]);
		for (int i = high + 1; i < arr.length - 1; i++) {
			temp[i] = arr[high];
		}

		while (low < high){
			int mid = low + fib[k - 1] - 1; // 等到黄金分割点下标,fib[k]就是最右边的边界
			if(arr[mid] > value){ // 如果要查找的值在左边
				high = mid - 1;
				k--; // 向左查询，high变成了fib[k-1],k就要向左移动一位
			}else if(arr[mid] < value) {  // 向左
				low = mid + 1;
				k -= 2;  // 向右查询，由于右边的值为fib[k-2],所以k要向左移动两位
			}else {
				if(mid > high){ // 如果查到high之外，即重复的部分，直接返回high坐标的值
					return high;
				}else {
					return mid;
				}
			}
		}
		// 未找到就返回-1
		return -1;
	}
}
